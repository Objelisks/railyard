regl for three d rendering
choo because trains and also for ui
peerjs for networking

documentation:
https://github.com/choojs/choo#api
https://github.com/regl-project/regl/blob/gh-pages/API.md
http://glmatrix.net/docs/
http://pomax.github.io/bezierjs/
https://github.com/mourner/rbush
https://www.npmjs.com/package/ray-aabb


functional use:
    initial state sharing
    cube map
    train linking


todo: 

make use of vectors more efficient
sync tracks
sync positions
sync movement
? selecting trains
? move a train from x to yz
render a geometry track

reorder tracks in turnout based on arbitrary line intersection through curves
build a module
saving / exporting modules
loading modules

track options: straight, 45, 90, S, switch, cubic bezier

static modules??

unpowered train cars
connect/disconnect (shouldn't be able to connect to another full train, maybe?)
mass considerations?
loading/unload resources
buildings

signals?
stations
track ends


The Networking Integration
    voting:
        array of voting members, set to current users (ignore anyone who joins during the voting process)
        try for consensus until max attempts, and then take the value with most votes, and then local value
    welcome to room
    vote on placement
    place neutral track
    X sync train positions, rotations, speed
    X sync tracks

rubberband state on update
button to toggle train collision
events:
    X player join
    X player leave
    X data update (all trains state, all turnouts state)
    X turnout activation
    X tracks placement
    switch train controlled
    vote request: type
    vote response: accept, revision
    vote result: type, data

data compression (make ids smaller) (do this last or only if an issue comes up)
    train: pos, rot, speed, id
    turnout init: list of track ids, open
    turnout state: list of bool
    track: id, 4 points

don't need yet probably:
    sync turnout state harder
    blend avg of player updates but rewind and extrapolate, window of 10 updates (60 frames)
    sync networking on regl tick


The Train Car Conjuction
    train to train collision
    X raycast boxes
    spawn cars
    connect / disconnect cars
    stations


The Modular Track Invention
    skyboard
    standards: minimum two through tracks
    create a layout
        carcassone tiles


The Shader Construction
    make some models, maybe??
    get tracks rendering as actual tracks with ties
    make some pbr materials, learn to paint them

SOUND EFFECTS????
    tunnel echo
    train whistle button
    background music

gameplay:
    choose a room name
    you're given a bunch of random track module tiles
    place the tiles to create a layout
    random exits from your layout are joined to the common layout (random roundabout)
    speed control
        speed when not actively controlled?
        interaction with collision
    switch control
        N just a direction indicator that automatically flips switches in front of your train (can have turnouts with 8 tracks output??)
        click on switches to toggle them
    train control
        multiple trains?
        control transfer btwn players?
    camera control
        kite
        conductor
        bird
        tower

in game
    train speed knob
        project mouse pos along tangent of first click to spin knob
    leave room button
    reset train button
what if the first part of joining a room is playing carcassone
shader noise fade in
dynamic lines using preallocated buffer
make trains tilt when they turn


models:
single color via vertex colors
start off with everything being a colored box
uvs on palette texture
engine, several cars, tracks, trees, rocks, water, station, station equipment, signals, terrain
animation? probably not

ambient occlusion and hella tilt shift



networking:
first player starts a room by putting in a name
everyone else connects to that name



gameplay:

start off with a loop, each player can connect their railyard to the loop
stations that will load cars with resource
stations that will unload cars of resource
train whistle


bonus:

hook it up to midi input so we can use knobs!!!
pull request esm modules for peerjs and choo https://github.com/rollup/rollup/wiki/pkg.module


done:

X index.html
X script.js
X serve libraries
X set up camera params
X render a box
X render a train
X i think i need browserify, BUT just for libraries
X initial network connections
X simple input
X simple ui
X connect tracks
X figure out switches (disable a segment in a direction?) 
X pbr shader
X fix choo routing issue
X clicking ground
X drawing tracks dynamically
X camera controls
X snap to track endpoints
X use endpoint tangents
X creating switches
X move debug stuff to separate file
X switch to cubic bezier
X fix switches
X fix moveBogie
X refactoring pass
X throttled log
X render canvas from choo to use state
X reset train button
X send messages to all players