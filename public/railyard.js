import { makeTrack, loadToBush } from './primitives/track.js'
import { makeTurnout } from './primitives/turnout.js'
import { makeTrain } from './primitives/train.js'
import { generateDebugArrowsForTurnout } from './primitives/debug.js'
import { quat, vec2, vec3 } from './libs/gl-matrix.mjs'
import { to_vec2 } from './utils.js'

const state = {
    tracks: [],
    turnouts: [],
    trains: []
}

state.tracks = [
    makeTrack([0.09740475995070241,6.68128757523183],[4.017900252064378,5.376814134168415],[5.579762322917406,3.6477990629856247],[6.513700140195296,1.5888375456991675]),
    makeTrack([6.513700140195296,1.5888375456991675],[7.574476853957201,-0.7497533022817553],[6.936185476273138,-4.002947217637663],[5.170675536763084,-6.169400327914275]),
    makeTrack([5.170675536763084,-6.169400327914275],[1.3149407047893185,-10.900763506447014],[-1.014520607506153,-12.928709763188973],[-3.4652890491763237,-9.494959347885935]),
    makeTrack([-3.4652890491763237,-9.494959347885935],[-5.6238744013125554,-6.470584126082599],[-2.2651855692869862,-3.747021188398419],[-2.1152985926993875,-1.8283020906676626]),
    makeTrack([-2.1152985926993875,-1.8283020906676626],[-1.8697824027131313,1.3145767187758661],[-1.4841973762272413,2.8003994604578484],[-5.040586216105655,3.1407956400416417]),
    makeTrack([-5.040586216105655,3.1407956400416417],[-8.220560990400744,3.445163726063386],[-9.170549829707628,4.770954975671916],[-7.049495960526805,5.542211885208112]),
    makeTrack([-7.049495960526805,5.542211885208112],[-4.08387939990934,6.620568402524928],[-1.9382130099950912,7.358602297922508],[0.09740475995070241,6.68128757523183]),
    makeTrack([-3.4652890491763237,-9.494959347885935],[-5.553586079297032,-6.5690644846542465],[-5.991082445063544,-6.493984061947732],[-8.186543791771609,-4.416329960463688]),
    makeTrack([-8.186543791771609,-4.416329960463688],[-12.19539878633405,-0.6225879143118851],[-11.653661304481748,-0.024650938569104497],[-10.841600749266192,2.007634597638983]),
    makeTrack([-10.841600749266192,2.007634597638983],[-10.295916495488557,3.373279325936883],[-9.997074176977826,4.470414464657818],[-7.049495960526805,5.542211885208112]),
    makeTrack([-2.1152985926993875,-1.8283020906676626],[-2.331150857205012,-4.591449841221724],[-1.2230917427968535,-5.389115014888551],[0.5159501201147982,-7.383181549004075]),
    makeTrack([0.5159501201147982,-7.383181549004075],[2.9366214907697263,-10.158836277771101],[2.1049531725174067,-9.057997385295996],[3.6256116354758845,-11.4596597739317]),
    makeTrack([3.6256116354758845,-11.4596597739317],[4.985919051270557,-13.60807063480329],[5.03396805676912,-14.98829577841685],[4.121933194920156,-16.755981333375956]),
    makeTrack([4.121933194920156,-16.755981333375956],[0.837998058814196,-23.120830909135368],[-2.7788694284893793,-24.41580967296555],[-5.091832401816655,-20.57763972028684]),
    makeTrack([-5.091832401816655,-20.57763972028684],[-8.041974400912476,-15.682124094813442],[-7.926167908201776,-13.386833398587447],[-9.188607516873928,-10.154622853821186]),
    makeTrack([-9.188607516873928,-10.154622853821186],[-10.023460545548298,-8.017157628494822],[-6.117979860521965,-6.373895891827936],[-8.186543791771609,-4.416329960463688]),
    makeTrack([6.513700140195296,1.5888375456991675],[8.429178295071521,-2.6340301175764536],[7.954946161547812,-1.8261266188299565],[9.156274916566922,-1.6230366579314612]),
    makeTrack([9.156274916566922,-1.6230366579314612],[11.842751167425305,-1.1688759176161372],[12.100802341814845,1.0655061693209795],[11.441842623788416,3.2796664342600685]),
    makeTrack([11.441842623788416,3.2796664342600685],[10.448198731630363,6.618393769680505],[9.10100749534047,7.154600798676847],[7.897680462017245,6.888251554585198]),
    makeTrack([7.897680462017245,6.888251554585198],[6.494177142941767,6.577594486503306],[5.703634306105293,6.299359075491047],[6.220310408905947,4.8109114680436935]),
    makeTrack([6.220310408905947,4.8109114680436935],[6.809057162501132,3.1148417407405606],[6.056765254301338,2.596197274105373],[6.513700140195296,1.5888375456991675]),
    makeTrack([-7.049495960526805,5.542211885208112],[-8.28567351387983,5.092713410280038],[-8.242913846628559,6.39860670569976],[-10.95195847424453,5.955592059832661]),
    makeTrack([-10.95195847424453,5.955592059832661],[-14.784380145574868,5.328869667654156],[-19.740541639543917,3.198677617233347],[-18.372563353161084,-1.5379394364699372]),
    makeTrack([-18.372563353161084,-1.5379394364699372],[-17.18904445282926,-5.6358669127274466],[-17.698467537966657,-6.510961854103989],[-15.074652407221768,-10.294100047563102]),
    makeTrack([-15.074652407221768,-10.294100047563102],[-12.426334998003666,-14.1125667610969],[-8.997167375886313,-14.097060685743632],[-5.091832401816655,-20.57763972028684]),
]

const precise = (x) => x.toPrecision(4)
const getKey = (endpoint) => `${precise(endpoint.end[0])},${precise(endpoint.end[1])}:${precise(endpoint.facing[0])},${precise(endpoint.facing[1])}`

const detectAndFixTurnouts = () => {
    const turnoutLocations = {}
    const endpoints = state.tracks.flatMap(track => [
        {track, end: to_vec2(track.curve.get(0)), facing: vec2.normalize([], to_vec2(track.curve.derivative(0)))},
        {track, end: to_vec2(track.curve.get(1)), facing: vec2.scale([], vec2.normalize([], to_vec2(track.curve.derivative(1))), -1)}
    ])
    endpoints.forEach(endpoint => {
        const key = getKey(endpoint)
        if(turnoutLocations[key]) {
            turnoutLocations[key].push(endpoint)
        } else {
            turnoutLocations[key] = [endpoint]
        }
    })
    let added = 0
    Object.values(turnoutLocations).forEach(endpoints => {
        if(endpoints.length > 1) {
            state.turnouts.push(makeTurnout(endpoints.map(endpoint => endpoint.track), endpoints[0].end))
            added += 1
        }
    })
    console.log(`generated ${added} turnouts`)
}

const placeTrainOnTrack = (train, track) => {
    const curve = track.curve
    const point = curve.get(0.1)
    const tangent = curve.derivative(0.1)
    train.position = [point.x, 0, point.y]
    train.rotation = quat.rotationTo([], [1, 0, 0], vec3.normalize([], [tangent.x, 0, tangent.y]))
    train.speed = 0
}

export const addTrack = (track) => {
    return state.tracks.push(track) - 1
}

export const getTracks = () => state.tracks


export const addTurnout = (turnout) => {
    return state.turnouts.push(turnout) - 1
}

export const getTurnouts = () => state.turnouts


export const addTrain = (train) => {
    return state.trains.push(train) - 1
}

export const getTrains = () => state.trains

export const setTrains = (trains) => state.trains = trains

// initialize railyard state
detectAndFixTurnouts()
loadToBush(state.tracks)
state.turnouts.forEach(turnout => generateDebugArrowsForTurnout(turnout))
addTrain(makeTrain())
placeTrainOnTrack(state.trains[0], state.tracks[0])

